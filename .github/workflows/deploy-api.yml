name: Deploy API to Azure App Service

on:
  push:
    branches: [ main ]
    paths:
      - "**/*.csproj"
      - "**/*.sln"
      - "api/**"
      - ".github/workflows/deploy-api.yml"
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 241runners-api            # <-- your Azure App Service (API) name
  DOTNET_VERSION: "8.0.x"
  API_BASE_URL: "https://241runners-api.azurewebsites.net"  # used for the post-deploy health check
  API_PROJECT_PATH: auto                        # set to 'auto' to detect the first *.csproj, or set e.g. 'backend/Api/'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Locate API .csproj (auto mode)
        id: findproj
        run: |
          if [ "${{ env.API_PROJECT_PATH }}" = "auto" ]; then
            PROJ=$(git ls-files **/*.csproj | head -n 1)
            if [ -z "$PROJ" ]; then
              echo "No .csproj found. Set API_PROJECT_PATH to your API project folder or csproj path." >&2
              exit 1
            fi
            echo "CSPROJ=$PROJ" >> $GITHUB_ENV
          else
            if [ -d "${{ env.API_PROJECT_PATH }}" ]; then
              PROJ=$(ls -1 "${{ env.API_PROJECT_PATH }}"/*.csproj | head -n 1)
              if [ -z "$PROJ" ]; then
                echo "No .csproj found in ${{ env.API_PROJECT_PATH }}." >&2
                exit 1
              fi
              echo "CSPROJ=$PROJ" >> $GITHUB_ENV
            else
              echo "CSPROJ=${{ env.API_PROJECT_PATH }}" >> $GITHUB_ENV
            fi
          fi
          echo "Using project: $CSPROJ"

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore
        run: dotnet restore "$CSPROJ"

      - name: Build (Release)
        run: dotnet build "$CSPROJ" --configuration Release --no-restore

      - name: Publish
        run: |
          dotnet publish "$CSPROJ" --configuration Release --output $GITHUB_WORKSPACE/publish --no-build
          ls -la $GITHUB_WORKSPACE/publish

      # Optional: run EF Core migrations from CI (requires secrets.SQL_CONNECTION_STRING)
      # - name: Run EF Core migrations (optional)
      #   if: ${{ secrets.SQL_CONNECTION_STRING != '' }}
      #   run: |
      #     dotnet tool install --global dotnet-ef
      #     export PATH="$PATH:/home/runner/.dotnet/tools"
      #     dotnet ef database update --project "$CSPROJ" --connection "${{ secrets.SQL_CONNECTION_STRING }}"

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ github.workspace }}/publish
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          # If you prefer Azure login + federated creds, swap publish-profile for the login action + slot creds.

      - name: Post-deploy health check
        shell: bash
        run: |
          echo "Waiting for app to warm up..."
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE_URL/api/auth/health")
            echo "Attempt $i => HTTP $code"
            if [ "$code" = "200" ]; then
              echo "Health OK"
              exit 0
            fi
            sleep 6
          done
          echo "Health check failed"
          exit 1
